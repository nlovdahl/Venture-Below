# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file is a part of Venture Below, a game for the SNES.
# Copyright (C) 2020 Nicholas Lovdahl

# Venture Below is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.

# Venture Below is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# Venture Below. If not, see <https://www.gnu.org/licenses/>.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# list the ROM banks we are working with
MEMORY {
	# total cartridge size of 1 MiB
	# HiROM configuration
	# ROM is split into 16 64KiB banks
	ROM0:  start = $C00000, size = $10000, fill = yes;
	ROM1:  start = $C10000, size = $10000, fill = yes;
	ROM2:  start = $C20000, size = $10000, fill = yes;
	ROM3:  start = $C30000, size = $10000, fill = yes;
	ROM4:  start = $C40000, size = $10000, fill = yes;
	ROM5:  start = $C50000, size = $10000, fill = yes;
	ROM6:  start = $C60000, size = $10000, fill = yes;
	ROM7:  start = $C70000, size = $10000, fill = yes;
	ROM8:  start = $C80000, size = $10000, fill = yes;
	ROM9:  start = $C90000, size = $10000, fill = yes;
	ROM10: start = $CA0000, size = $10000, fill = yes;
	ROM11: start = $CB0000, size = $10000, fill = yes;
	ROM12: start = $CC0000, size = $10000, fill = yes;
	ROM13: start = $CD0000, size = $10000, fill = yes;
	ROM14: start = $CE0000, size = $10000, fill = yes;
	ROM15: start = $CF0000, size = $10000, fill = yes;
}

# list how segments are organized in ROM
SEGMENTS {
	RESET_INTERRUPT_HANDLER:               load = ROM0, start = $C08000;
	VBLANK_INTERRUPT_HANDLER:              load = ROM0;
	MISC_INTERRUPT_HANDLERS:               load = ROM0;
	HEADER_DATA:                           load = ROM0, start = $C0FFB0;
	NATIVE_MODE_INTERRUPT_HANDLER_TABLE:   load = ROM0, start = $C0FFE4;
	EMULATOR_MODE_INTERRUPT_HANDLER_TABLE: load = ROM0, start = $C0FFF4;
}