# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This file is a part of Venture Below, a game for the SNES.
# Copyright (C) 2020 Nicholas Lovdahl

# Venture Below is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.

# Venture Below is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# Venture Below. If not, see <https://www.gnu.org/licenses/>.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# list how memory should be laid out (and some other config info too)
MEMORY {
	# work RAM (low and high) is split into 2 64KiB banks
	STACK: start = $7E0000, size = $2000,  type = rw;
	LWRAM: start = $7E2000, size = $E000,  type = rw;
	HWRAM: start = $7F0000, size = $10000, type = rw;

	# total cartridge size of 1 MiB
	# HiROM configuration
	# ROM is split into 16 64KiB banks
	ROM0:  start = $C00000, size = $10000, type = ro, fill = yes, file = %O;
	ROM1:  start = $C10000, size = $10000, type = ro, fill = yes, file = %O;
	ROM2:  start = $C20000, size = $10000, type = ro, fill = yes, file = %O;
	ROM3:  start = $C30000, size = $10000, type = ro, fill = yes, file = %O;
	ROM4:  start = $C40000, size = $10000, type = ro, fill = yes, file = %O;
	ROM5:  start = $C50000, size = $10000, type = ro, fill = yes, file = %O;
	ROM6:  start = $C60000, size = $10000, type = ro, fill = yes, file = %O;
	ROM7:  start = $C70000, size = $10000, type = ro, fill = yes, file = %O;
	ROM8:  start = $C80000, size = $10000, type = ro, fill = yes, file = %O;
	ROM9:  start = $C90000, size = $10000, type = ro, fill = yes, file = %O;
	ROM10: start = $CA0000, size = $10000, type = ro, fill = yes, file = %O;
	ROM11: start = $CB0000, size = $10000, type = ro, fill = yes, file = %O;
	ROM12: start = $CC0000, size = $10000, type = ro, fill = yes, file = %O;
	ROM13: start = $CD0000, size = $10000, type = ro, fill = yes, file = %O;
	ROM14: start = $CE0000, size = $10000, type = ro, fill = yes, file = %O;
	ROM15: start = $CF0000, size = $10000, type = ro, fill = yes, file = %O;
}

# list how segments are organized in memory
SEGMENTS {
	# list how WRAM segments should be organized
	BSS:                                   load = LWRAM, type = bss, start = $7E2000;

	# list how ROM segments should be organized
	# only $C08000 - $C0FFFF will map to valid program data on reset
	# so interrupt handlers need to go here
	INTERRUPT_HANDLER_CODE:                load = ROM0, type = ro, start = $C08000;
	# header data should start at the specified address
	HEADER_DATA:                           load = ROM0, type = ro, start = $C0FFB0;
	NATIVE_MODE_INTERRUPT_HANDLER_TABLE:   load = ROM0, type = ro, start = $C0FFE4;
	EMULATOR_MODE_INTERRUPT_HANDLER_TABLE: load = ROM0, type = ro, start = $C0FFF4;
	
	# (non-interrupt handler) code gets its own bank
	CODE:                                  load = ROM1, type = ro, start = $C10000;
	
	PALETTE_DATA:                          load = ROM2, type = ro, start = $C20000;
	TILESET_DATA:                          load = ROM2, type = ro, align = $100;
}